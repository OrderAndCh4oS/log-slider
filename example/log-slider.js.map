{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","difference","a","b","steps","console","minP","Infinity","maxP","_iterator","s","_step","n","done","step","maxV","diff","diffLast","closest","sliderTypes","Object","freeze","getClosest","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$changeHandler","changeHandler","inputHandler","_classCallCheck","_defineProperty","_setAttribute","LOG","_initialValue","LINEAR","_showTab","_decimalPlaces","_id","_input","document","getElementById","_min","_max","_type","_setData","_steps","split","map","x","Number","_initialiseLogValue","_changeHandler","_wrapper","_createWrapper","_tab","_createTab","_updateDom","_updateResult","isLogSlider","_log","_logMax","Error","HTMLInputElement","concat","classList","add","_this2","_logMin","_result","addEventListener","insertBefore","append","wrapper","tab","innerText","toFixed","style","left","clientWidth","parentNode","param","hasAttribute","attribute","getAttribute","defaultValue","dataKey","position","dataset"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    console.log('HELLLLOOOOOO');\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result;\n    _id;\n    _log;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tab;\n    _decimalPlaces;\n    _steps;\n    _changeHandler;\n    _wrapper;\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} changeHandler An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     * @param {callback=} inputHandler An onInput callback matching (value, log) => {}\n     *                                 log only available if type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            changeHandler = () => {},\n            inputHandler = () => {},\n        }) {\n        this._id = id;\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        if(typeof this._steps === 'string') this._steps = this._steps.split(',')\n            .map(x => Number(x));\n        console.log(this._steps);\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._changeHandler = changeHandler;\n        if(this._showTab) {\n            this._wrapper = this._createWrapper();\n            this._tab = this._createTab();\n            this._updateDom();\n        }\n        this._updateResult();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't get a log value. Change the type to sliderTypes.LOG`);\n        }\n\n        return this._log;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't set a log value. Change the type to sliderTypes.LOG`);\n        }\n        this._log = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._log, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {\n        this.value = this._initialValue;\n    };\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._log = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(`No element found with id of ${this._id}`);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(`${this._id} is not an \\`<input />\\` tag`);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(`${this._id} is not does \\`type=\"range\"\\` set.`);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this._type === sliderTypes.LOG ? 1 : this._min;\n        this._input.max = this._type === sliderTypes.LOG ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => {\n            this._updateResult();\n            this._log = this._result;\n            this._changeHandler(this._result, this.value);\n        });\n        this._input.addEventListener('change', () => {\n            this._updateResult();\n            if(this._steps) this.value = this.isLogSlider()\n                ? inverseLogScale(\n                    this._result,\n                    this._logMax,\n                    this._logMin,\n                )\n                : this._result;\n            this._log = this._result;\n            this._changeHandler(this._result, this.value);\n        });\n    }\n\n    _updateDom() {\n        this._input.parentNode.insertBefore(this._wrapper, this._input);\n        this._wrapper.append(this._input);\n        this._wrapper.append(this._tab);\n    }\n\n    _createWrapper() {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add('range-slider--wrapper');\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapper.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        this._tab.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tab.style.left = ((this.value / max) *\n            (this._wrapper.clientWidth - 8)) + 4 + 'px';\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}