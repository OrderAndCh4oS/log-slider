{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","difference","a","b","steps","Infinity","minP","_iterator","s","_step","n","done","step","maxV","diff","closest","sliderTypes","Object","freeze","LOG","getClosest","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$callback","callback","_classCallCheck","_defineProperty","isNotTypeRange","_type","_id","LINEAR","_input","document","getElementById","_messages","elementNotFound","concat","isNotInputElement","notLogSliderSet","_setAttribute","_min","_initialValue","_setData","_showTab","_decimalPlaces","_steps","_callback","split","map","x","Number","_initialiseLogValue","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","_max","isLogSlider","_logMax","_logMin","_this2","Error","HTMLInputElement","add","addEventListener","_handleInputEvent","_handleChangeEvent","window","_updateStepMarkers","_result","_tabEl","innerText","toFixed","style","left","_getLeft","offset","_wrapperEl","clientWidth","_createWrapper","parentNode","insertBefore","_inputWrapperEl","append","_createTab","_stepMarkerContainerEl","_createStepMarkers","className","wrapper","createElement","classList","position","tab","_updateTab","markerContainer","_step2","_iterator2","_createForOfIteratorHelper","marker","leftValue","push","err","e","f","i","_stepMarkerEls","param","attribute","defaultValue","hasAttribute","getAttribute","dataset","dataKey","notLogSliderGet"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderGet);\n        }\n\n        return this._result;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderSet);\n        }\n        this._result = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._result, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue;};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => this._updateStepMarkers());\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this.value);\n    }\n\n    _handleChangeEvent() {\n        this._updateResult();\n        this._snapToStep();\n        this._callback(this._result, this.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) this.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.value, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - min) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('range-slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('range-slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('range-slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('range-slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}