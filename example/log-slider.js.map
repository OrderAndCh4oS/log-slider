{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","difference","a","b","steps","Infinity","minP","_iterator","s","_step","n","done","step","maxV","diff","closest","sliderTypes","Object","freeze","LOG","getClosest","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$callback","callback","_classCallCheck","_defineProperty","notLogSliderGet","_type","_id","LINEAR","_setAttribute","_messages","elementNotFound","concat","isNotInputElement","isNotTypeRange","document","getElementById","_min","_max","_setData","_showTab","_decimalPlaces","_steps","_callback","split","map","x","Number","_initialiseLogValue","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","_initialValue","_result","_logMax","_this2","_input","Error","HTMLInputElement","classList","add","isLogSlider","addEventListener","_handleInputEvent","_handleChangeEvent","_logMin","_tabEl","innerText","toFixed","style","left","_getLeft","offset","_wrapperEl","clientWidth","parentNode","insertBefore","_inputWrapperEl","_createWrapper","append","_createTab","_stepMarkersEl","_createStepMarkers","className","wrapper","createElement","position","tab","paddingBottom","markerContainer","_step2","_iterator2","_createForOfIteratorHelper","marker","leftValue","err","e","f","param","attribute","defaultValue","hasAttribute","getAttribute","dataKey","dataset","notLogSliderSet"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkersEl;\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderGet);\n        }\n\n        return this._result;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderSet);\n        }\n        this._result = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._result, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue;};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this.value);\n    }\n\n    _handleChangeEvent() {\n        this._updateResult();\n        this._snapToStep();\n        this._callback(this._result, this.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) this.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.value, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - min) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('range-slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('range-slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkersEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkersEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('range-slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('range-slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n        }\n        return markerContainer;\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}