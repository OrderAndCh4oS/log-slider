{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","sliderTypes","Object","freeze","LOG","maxP","a","b","maxV","_step","Infinity","closest","_iterator","_createForOfIteratorHelper","steps","s","n","done","step","diff","difference","diffLast","err","e","f","LogSlider","_ref","_this","this","id","type","showTab","_ref$callback","callback","_classCallCheck","_defineProperty","_type","isNotInputElement","_id","LINEAR","notLogSliderGet","_initialValue","_messages","elementNotFound","concat","isNotTypeRange","notLogSliderSet","_input","getElementById","_min","_max","_setAttribute","_setData","_showTab","_steps","_decimalPlaces","_countDecimalPlaces","_callback","split","map","x","Number","_initialiseLogValue","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","_updateTab","arr","toString","isLogSlider","_result","_logMax","_logMin","HTMLInputElement","Error","classList","add","addEventListener","_this2","_handleInputEvent","_handleChangeEvent","window","_updateStepMarkers","inputValue","toFixed","left","offset","abs","_wrapperEl","clientWidth","_createWrapper","parentNode","insertBefore","_inputWrapperEl","append","_tabEl","_createTab","_stepMarkerContainerEl","_createStepMarkers","className","wrapper","document","createElement","position","tab","style","paddingBottom","markerContainer","_step2","_iterator2","marker","_getLeft","leftValue","_stepMarkerEls","push","i","param","attribute","defaultValue","hasAttribute","dataset","dataKey"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result = 0;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum inputValue of the range slider\n     * @param {number=1000} max Maximum inputValue of the range slider.\n     * @param {number=500} value The initial inputValue of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (inputValue, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'inputValue', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._steps = this._setData(steps, 'steps', null);\n        this._decimalPlaces = this._countDecimalPlaces(this._step);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n        this._updateTab();\n    }\n\n    _countDecimalPlaces(value) {\n        const arr = value.toString().split('.');\n        if(arr.length > 1) return arr[1].length\n        return 0;\n    }\n\n    get input() {\n        return this._input;\n    }\n\n    get inputValue() {\n        return this._input.value;\n    }\n\n    set inputValue(value) {\n        this._input.value = value;\n    }\n\n    get value() {\n        return this._result;\n    }\n\n    set value(value) {\n        this._result = value;\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => {\n            this._updateStepMarkers();\n            this._updateTab();\n        });\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    _handleChangeEvent() {\n        this._snapToStep();\n        this._updateTab();\n        this._callback(this._result, this._input.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) {\n            this._input.value = this.isLogSlider()\n                ? inverseLogScale(\n                    this._result,\n                    this._logMax,\n                    this._logMin,\n                )\n                : this._result;\n        }\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.inputValue, this._logMax, this._logMin)\n            : Number(this.inputValue);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.inputValue, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - Math.abs(min)) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}