{"version":3,"sources":["log-slider.js"],"names":["inverseLogScale","logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","lg","difference","a","b","minP","steps","setValue","maxP","includes","Number","clearTimeout","timer","setTimeout","_step","diffLast","Infinity","_iterator","_createForOfIteratorHelper","s","n","done","step","diff","closest","err","e","f","Object","freeze","LINEAR","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$changeHandler","changeHandler","_ref$inputHandler","inputHandler","_classCallCheck","_defineProperty","_type","sliderTypes","LOG","_input","document","_initialValue","_updateLog","_changeHandler","_showTab","_updateValue","_setData","_decimalPlaces","isLogSlider","_inputHandler","_initialiseLogValue","_id","getElementById","_setAttribute","_min","_max","_steps","split","map","x","_wrapper","_createWrapper","_tab","_createTab","_updateDom","_updateTab","_logMax","Error","HTMLInputElement","concat","_log","add","_logMin","addEventListener","handleChange","handleInput","parentNode","insertBefore","append","wrapper","createElement","classList","style","position","tab","paddingBottom","innerText","toFixed","left","handler","_setValue","scope","param","attribute","defaultValue","hasAttribute","getAttribute","dataKey","dataset"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nlet timer;\n\nconst snapToClosestStep = (steps, value, setValue) => {\n    if(steps.includes(Number(value))) return;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n        let diffLast = Infinity;\n        let closest = Infinity;\n        for(const step of steps) {\n            const diff = difference(step, value);\n            if(diff > diffLast) break;\n            diffLast = diff;\n            closest = step;\n        }\n        setValue(closest);\n    }, 250);\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _id;\n    _log;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tab;\n    _decimalPlaces;\n    _steps;\n    _inputHandler;\n    _changeHandler;\n    _wrapper;\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} changeHandler An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     * @param {callback=} inputHandler An onInput callback matching (value, log) => {}\n     *                                 log only available if type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            changeHandler = () => {},\n            inputHandler = () => {},\n        }) {\n        this._id = id;\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        if(typeof this._steps === 'string') this._steps = this._steps.split(',')\n            .map(x => Number(x));\n        console.log(this._steps);\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._inputHandler = inputHandler;\n        this._changeHandler = changeHandler;\n        if(this._showTab) {\n            this._wrapper = this._createWrapper();\n            this._tab = this._createTab();\n            this._updateDom();\n            this._updateTab();\n        }\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't get a log value. Change the type to sliderTypes.LOG`);\n        }\n\n        return this._log;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't set a log value. Change the type to sliderTypes.LOG`);\n        }\n        this._log = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._log, this._logMax,\n            this._logMin);\n        this._changeHandler(this.value, this._log);\n        this._updateTab();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this.isLogSlider()\n            ? this._updateLog(this._changeHandler)\n            : this._updateValue(this._changeHandler);\n        this._updateTab();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {\n        this.value = this._initialValue;\n    };\n\n    handleChange = () => {\n        this.isLogSlider()\n            ? this._updateLog(this._changeHandler)\n            : this._updateValue(this._changeHandler);\n        this._updateTab();\n    };\n\n    handleInput = () => {\n        this.isLogSlider()\n            ? this._updateLog(this._inputHandler)\n            : this._updateValue(this._inputHandler);\n        this._updateTab();\n    };\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._log = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(`No element found with id of ${this._id}`);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(`${this._id} is not an \\`<input />\\` tag`);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(`${this._id} is not does \\`type=\"range\"\\` set.`);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this._type === sliderTypes.LOG ? 1 : this._min;\n        this._input.max = this._type === sliderTypes.LOG ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('change', this.handleChange);\n        this._input.addEventListener('input', this.handleInput);\n    }\n\n    _updateDom() {\n        this._input.parentNode.insertBefore(this._wrapper, this._input);\n        this._wrapper.append(this._input);\n        this._wrapper.append(this._tab);\n    }\n\n    _createWrapper() {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add('range-slider--wrapper');\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapper.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _updateTab() {\n        const value = Number(this.isLogSlider() ? this._log : this.value);\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        this._tab.innerText = (value.toFixed(this._decimalPlaces));\n        this._tab.style.left = ((this.value / max) *\n            (this._wrapper.clientWidth - 8)) + 4 + 'px';\n    }\n\n    _updateLog(handler) {\n        this.log = logScale(this.value, this._logMax, this._logMin);\n        handler(this.value, this._log);\n    }\n\n    _updateValue(handler) {\n        if(this._steps) {\n            snapToClosestStep(this._steps, this.value, this._setValue(this));\n            return;\n        }\n        handler(this.value);\n    }\n\n    _setValue(scope) {\n        return (value) => {\n            scope.value = value;\n            scope._changeHandler(value);\n            scope._inputHandler(value);\n        };\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}