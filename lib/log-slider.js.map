{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","sliderTypes","Object","freeze","LOG","maxP","a","b","maxV","_step","Infinity","closest","_iterator","_createForOfIteratorHelper","steps","s","n","done","step","diff","difference","diffLast","err","e","f","LogSlider","_ref","_this","this","id","type","showTab","_ref$callback","callback","_classCallCheck","_defineProperty","_setAttribute","_max","_type","LINEAR","_showTab","_setData","_id","_messages","elementNotFound","concat","isNotInputElement","isNotTypeRange","notLogSliderGet","notLogSliderSet","_input","getElementById","_min","_logMax","_steps","_initialValue","_decimalPlaces","_countDecimalPlaces","_callback","split","map","x","Number","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","_updateTab","arr","toString","_this2","HTMLInputElement","Error","classList","add","isLogSlider","addEventListener","_handleInputEvent","_handleChangeEvent","window","_updateStepMarkers","_result","inputValue","_logMin","getClosest","toFixed","_tabEl","style","abs","_wrapperEl","clientWidth","offset","_createWrapper","parentNode","insertBefore","_inputWrapperEl","append","_createTab","_stepMarkerContainerEl","_createStepMarkers","className","wrapper","document","createElement","position","tab","markerContainer","_step2","_iterator2","innerText","left","_getLeft","marker","leftValue","i","_stepMarkerEls","param","attribute","defaultValue","hasAttribute","dataKey","dataset"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result = 0;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum inputValue of the range slider\n     * @param {number=1000} max Maximum inputValue of the range slider.\n     * @param {number=500} value The initial inputValue of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (inputValue, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._logMin = this._min;\n        this._logMax = this._max;\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._steps = this._setData(steps, 'steps', null);\n        this._initialValue = this._setAttribute(value, 'value', 1);\n        this._decimalPlaces = this._countDecimalPlaces(this._step);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n        this._updateTab();\n        this.value = this._initialValue;\n    }\n\n    _countDecimalPlaces(value) {\n        const arr = value.toString().split('.');\n        if(arr.length > 1) return arr[1].length\n        return 0;\n    }\n\n    get input() {\n        return this._input;\n    }\n\n    get inputValue() {\n        return this._input.value;\n    }\n\n    set inputValue(value) {\n        this._input.value = value;\n        this._handleInputEvent();\n    }\n\n    get value() {\n        return this._result;\n    }\n\n    set value(value) {\n        this._result = value;\n        this._input.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue};\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => {\n            this._updateStepMarkers();\n            this._updateTab();\n        });\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    _handleChangeEvent() {\n        this._snapToStep();\n        this._updateTab();\n        this._callback(this._result, this._input.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) {\n            this._input.value = this.isLogSlider()\n                ? inverseLogScale(\n                    this._result,\n                    this._logMax,\n                    this._logMin,\n                )\n                : this._result;\n        }\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.inputValue, this._logMax, this._logMin)\n            : Number(this.inputValue);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.inputValue, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - Math.abs(min)) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}