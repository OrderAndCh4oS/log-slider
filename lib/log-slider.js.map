{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","difference","a","b","steps","Infinity","minP","_iterator","s","_step","n","done","step","maxV","diff","closest","sliderTypes","Object","freeze","LOG","getClosest","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$changeHandler","changeHandler","inputHandler","_classCallCheck","_defineProperty","_setAttribute","LINEAR","_type","_showTab","_setData","_id","_input","document","getElementById","_min","_max","_initialValue","_steps","split","map","x","Number","_configureRangeInput","_wrapper","_createWrapper","_tab","_createTab","_updateDom","_updateResult","_log","_logMax","_initialiseLogValue","Error","HTMLInputElement","concat","classList","add","isLogSlider","_this2","_logMin","_result","addEventListener","insertBefore","append","wrapper","tab","_changeHandler","innerText","toFixed","_decimalPlaces","style","left","clientWidth","parentNode","param","hasAttribute","attribute","getAttribute","defaultValue","dataKey","position","dataset"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result;\n    _id;\n    _log;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tab;\n    _decimalPlaces;\n    _steps;\n    _changeHandler;\n    _wrapper;\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} changeHandler An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     * @param {callback=} inputHandler An onInput callback matching (value, log) => {}\n     *                                 log only available if type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            changeHandler = () => {},\n            inputHandler = () => {},\n        }) {\n        this._id = id;\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        if(typeof this._steps === 'string') this._steps = this._steps.split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._changeHandler = changeHandler;\n        if(this._showTab) {\n            this._wrapper = this._createWrapper();\n            this._tab = this._createTab();\n            this._updateDom();\n        }\n        this._updateResult();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't get a log value. Change the type to sliderTypes.LOG`);\n        }\n\n        return this._log;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(\n                `${this._id} is not a log slider, you can't set a log value. Change the type to sliderTypes.LOG`);\n        }\n        this._log = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._log, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {\n        this.value = this._initialValue;\n    };\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._log = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(`No element found with id of ${this._id}`);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(`${this._id} is not an \\`<input />\\` tag`);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(`${this._id} is not does \\`type=\"range\"\\` set.`);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this._type === sliderTypes.LOG ? 1 : this._min;\n        this._input.max = this._type === sliderTypes.LOG ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => {\n            this._updateResult();\n            this._log = this._result;\n            this._changeHandler(this._result, this.value);\n        });\n        this._input.addEventListener('change', () => {\n            this._updateResult();\n            if(this._steps) this.value = this.isLogSlider()\n                ? inverseLogScale(\n                    this._result,\n                    this._logMax,\n                    this._logMin,\n                )\n                : this._result;\n            this._log = this._result;\n            this._changeHandler(this._result, this.value);\n        });\n    }\n\n    _updateDom() {\n        this._input.parentNode.insertBefore(this._wrapper, this._input);\n        this._wrapper.append(this._input);\n        this._wrapper.append(this._tab);\n    }\n\n    _createWrapper() {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add('range-slider--wrapper');\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapper.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        this._tab.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tab.style.left = ((this.value / max) *\n            (this._wrapper.clientWidth - 8)) + 4 + 'px';\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}