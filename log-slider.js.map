{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","sliderTypes","Object","freeze","LOG","maxP","a","b","maxV","_step","Infinity","closest","_iterator","_createForOfIteratorHelper","steps","s","n","done","step","diff","difference","diffLast","err","e","f","LogSlider","_ref","_this","this","id","type","showTab","_ref$callback","callback","_classCallCheck","_defineProperty","_setAttribute","LINEAR","_type","_setData","_initialValue","_id","_messages","elementNotFound","concat","isNotInputElement","isNotTypeRange","notLogSliderGet","notLogSliderSet","_input","getElementById","_min","_max","_showTab","_steps","_decimalPlaces","_countDecimalPlaces","_callback","split","map","x","Number","_initialiseLogValue","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","_updateTab","arr","toString","_logMax","_this2","Error","HTMLInputElement","classList","add","isLogSlider","_handleInputEvent","addEventListener","_handleChangeEvent","window","_updateStepMarkers","_logMin","_result","inputValue","_tabEl","innerText","toFixed","_getLeft","offset","abs","_wrapperEl","clientWidth","_createWrapper","parentNode","insertBefore","_inputWrapperEl","append","_createTab","_createStepMarkers","_stepMarkerContainerEl","className","wrapper","document","createElement","style","position","tab","paddingBottom","markerContainer","_step2","_iterator2","leftValue","marker","left","_stepMarkerEls","push","i","defaultValue","param","hasAttribute","attribute","getAttribute","dataKey","dataset"],"mappings":"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","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result = 0;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum inputValue of the range slider\n     * @param {number=1000} max Maximum inputValue of the range slider.\n     * @param {number=500} value The initial inputValue of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (inputValue, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'inputValue', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._steps = this._setData(steps, 'steps', null);\n        this._decimalPlaces = this._countDecimalPlaces(this._step);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n        this._updateTab();\n    }\n\n    _countDecimalPlaces(value) {\n        const arr = value.toString().split('.');\n        if(arr.length > 1) return arr[1].length\n        return 0;\n    }\n\n    get input() {\n        return this._input;\n    }\n\n    get inputValue() {\n        return this._input.value;\n    }\n\n    set inputValue(value) {\n        this._input.value = value;\n        this._handleInputEvent();\n    }\n\n    get value() {\n        return this._result;\n    }\n\n    set value(value) {\n        this._result = value;\n        this._input.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => {\n            this._updateStepMarkers();\n            this._updateTab();\n        });\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this._input.value);\n    }\n\n    _handleChangeEvent() {\n        this._snapToStep();\n        this._updateTab();\n        this._callback(this._result, this._input.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) {\n            this._input.value = this.isLogSlider()\n                ? inverseLogScale(\n                    this._result,\n                    this._logMax,\n                    this._logMin,\n                )\n                : this._result;\n        }\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.inputValue, this._logMax, this._logMin)\n            : Number(this.inputValue);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.inputValue, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - Math.abs(min)) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}