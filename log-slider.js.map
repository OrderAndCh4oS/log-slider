{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","maxP","sliderTypes","Object","freeze","LOG","LINEAR","difference","a","b","getClosest","steps","_step","diffLast","Infinity","_iterator","_createForOfIteratorHelper","s","n","done","step","diff","maxV","err","e","f","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$callback","callback","_classCallCheck","_defineProperty","_type","_initialValue","_id","_messages","elementNotFound","concat","isNotInputElement","isNotTypeRange","notLogSliderGet","notLogSliderSet","_input","document","getElementById","_setAttribute","_min","_max","_setData","_showTab","_decimalPlaces","_steps","split","map","x","Number","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","Error","add","isLogSlider","_initialiseLogValue","addEventListener","_this2","_handleInputEvent","_handleChangeEvent","window","_updateStepMarkers","_result","_callback","_logMax","_logMin","HTMLInputElement","_updateTab","_tabEl","innerText","toFixed","classList","_getLeft","_wrapperEl","clientWidth","offset","_createWrapper","_inputWrapperEl","append","_stepMarkerContainerEl","_createStepMarkers","className","wrapper","createElement","style","position","tab","paddingBottom","markerContainer","_step2","_iterator2","marker","left","leftValue","_stepMarkerEls","push","i","param","attribute","defaultValue","parentNode","insertBefore","getAttribute","dataKey","dataset","_createTab"],"mappings":"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","file":"log-slider.js","sourcesContent":["export const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nexport const inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nexport const sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nexport default class LogSlider {\n    _result;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderGet);\n        }\n\n        return this._result;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderSet);\n        }\n        this._result = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._result, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue;};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => this._updateStepMarkers());\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this.value);\n    }\n\n    _handleChangeEvent() {\n        this._updateResult();\n        this._snapToStep();\n        this._callback(this._result, this.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) this.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.value, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - min) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('range-slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('range-slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('range-slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('range-slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}