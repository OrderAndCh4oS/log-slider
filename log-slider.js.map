{"version":3,"sources":["log-slider.js"],"names":["logScale","value","max","min","arguments","length","undefined","minV","Math","log","scale","exp","inverseLogScale","lg","sliderTypes","Object","freeze","LOG","maxP","a","b","maxV","_step","Infinity","closest","_iterator","_createForOfIteratorHelper","steps","s","n","done","step","diff","difference","diffLast","err","e","f","LogSlider","_ref","_this","this","id","type","showTab","decimalPlaces","_ref$callback","callback","_classCallCheck","_defineProperty","isNotInputElement","_type","LINEAR","_initialValue","_id","_messages","elementNotFound","concat","isNotTypeRange","notLogSliderGet","document","getElementById","_setAttribute","_min","_max","_setData","_showTab","_decimalPlaces","_steps","_callback","split","map","x","Number","_initialiseLogValue","_configureRangeInput","_createDomElements","_updateResult","_snapToStep","isLogSlider","_result","_logMin","_input","Error","HTMLInputElement","classList","add","addEventListener","_this2","_handleInputEvent","_handleChangeEvent","window","_updateStepMarkers","_logMax","_tabEl","innerText","toFixed","style","left","_getLeft","offset","_wrapperEl","clientWidth","_createWrapper","parentNode","insertBefore","_inputWrapperEl","append","_createTab","_createStepMarkers","_stepMarkerContainerEl","className","wrapper","createElement","position","tab","getClosest","markerContainer","_step2","_iterator2","marker","leftValue","i","_stepMarkerEls","param","hasAttribute","attribute","getAttribute","defaultValue","dataKey","dataset","notLogSliderSet"],"mappings":"6pDAAA,IAAMA,SAAW,SAACC,EAAOC,EAAR,GAAyB,IAAZC,EAAY,EAAAC,UAAAC,aAAAC,IAAzB,EAAA,EAAmB,EAI1BC,EAAOC,KAAKC,IAAIN,GAGhBO,GAFOF,KAAKC,IAAIP,GAEAK,GAAR,IAEd,OAAOC,KAAKG,IAAIJ,EAAOG,GAAST,EARnB,KAWXW,gBAAkB,SAACC,EAAIX,EAAL,GAAsB,IAAZC,EAAY,EAAAC,UAAAC,aAAAC,IAAtB,EAAA,EAAgB,EAZlCN,EAAWQ,KAAAC,IAAXT,GAEQU,GAF4BF,KAAAC,IAAAP,GAEtCK,GAAA,IAGA,OAAUC,KAAOC,IAAJI,GAAbN,GAAAG,EAQa,GAbjBI,YAAAC,OAAAC,OAAA,CAyBIC,IAAK,MAbHL,OAAAA,WAEIM,WAAN,SAAAC,EAAAC,GAAA,OAAAA,EAAAD,EAAAA,EAAAC,EAAAA,EAAAD,GAGME,WAAYZ,SAAAA,EAAlBR,GAEA,IAFAqB,EAEMZ,EAAaa,EAAAA,EAEnBC,EAAQD,EAAAA,EAJRE,EAAAC,2BALJC,GAKI,IALJ,IAAAF,EAAAG,MAAAN,EAAAG,EAAAI,KAAAC,MAAA,CAAA,IAAAC,EAAAT,EAAArB,MAuBc+B,EAAOC,WAAWF,EAAM9B,GAXhCa,GAAcC,EAAdD,EAAqBE,MAClBkB,EADyBF,EAExBR,EAAEO,GATR,MAAAI,GAAAV,EAAAW,EAAAD,GAAA,QAAAV,EAAAY,IAuBA,OAAOb,GARHU,U,WA6CJ,SAAAI,EAAAC,GAAA,IAAAC,EAAAC,KAEQC,EAFRH,EAEQG,GACAX,EAHRQ,EAGQR,KACA5B,EAJRoC,EAIQpC,IACAD,EALRqC,EAKQrC,IACAD,EANRsC,EAMQtC,MACA0C,EAPRJ,EAOQI,KACAC,EARRL,EAQQK,QACAC,EATRN,EASQM,cACAlB,EAVRY,EAUQZ,MAVRmB,EAAAP,EAWQQ,SAAAA,OAXR,IAAAD,EAWmB,aAXnBA,EAAAE,gBAAAP,KAAAH,GAAAW,gBAAAR,KAAA,eAAA,GAAAQ,gBAAAR,KAAA,WAAA,GAAAQ,gBAAAR,KAAA,eAAA,GAAAQ,gBAAAR,KAAA,eAAA,GAAAQ,gBAAAR,KAAA,cAAA,GAAAQ,gBAAAR,KAAA,aAAA,GAAAQ,gBAAAR,KAAA,cAAA,GAAAQ,gBAAAR,KAAA,sBAAA,GAAAQ,gBAAAR,KAAA,cAAA,GAAAQ,gBAAAR,KAAA,iBAAA,GAAAQ,gBAAAR,KAAA,kBAAA,GAAAQ,gBAAAR,KAAA,iBAAA,GAAAQ,gBAAAR,KAAA,8BAAA,GAAAQ,gBAAAR,KAAA,iBA9CiC,IA8CjCQ,gBAAAR,KAAA,cAgBQS,WAAAA,OAAiBV,EAAAW,QAAKrC,YAALG,MAhBzBgC,gBAAAR,KAAA,iBAkBuB,WAAA,OAAAD,EAAAW,QAAArC,YAAAsC,SAlBvBH,gBAAAR,KAAA,QAcI,WAAAD,EAAAvC,MAAAuC,EAAAa,gBAFGZ,KAAAa,IAAAZ,EAEHD,KAAKc,UAAY,CAFdC,gBAAA,+BAAAC,OAAAhB,KAAAa,KAAAJ,kBAAA,GAAAO,OAAAhB,KAAAa,IAAA,8BAAAI,eAAA,GAAAD,OAAAhB,KAAAa,IAAA,sCAAAK,gBAAA,GAAAF,OAAAhB,KAAAa,IAAA,yFANCrD,gBAMD,GAAAwD,OAAAhB,KAAAa,IAAA,0FAJCV,KAAAA,OAIDgB,SAAAC,eAAAnB,GAHCG,KAAAA,MAGDJ,KAAAqB,cAHCjB,EAGD,OAAA,GAFClB,KAEDoC,KAAAtB,KAFCd,cAEDxB,EAAA,MAAA,GAAAsC,KAAAuB,KAAAvB,KAAAqB,cAAA5D,EAAA,MAAA,KADC6C,KAAAA,cACDN,KAAAqB,cADY7D,EAAA,QACZ,KAcHwC,KAAKU,MAAQV,KAAKwB,SAAStB,EAAM,OAAQ7B,YAAYsC,QAdlDX,KAAAyB,SAAAzB,KAAAwB,SAAArB,EAAA,WAAA,GAgBHH,KAAK0B,eAAiB1B,KAAKwB,SAASpB,EAAe,gBAAiB,GAhBjEJ,KAAA2B,OAAA3B,KAAAwB,SAAAtC,EAAA,QAAA,MAkBHc,KAAK4B,UAAYtB,EAlBd,iBAAAN,KAAA2B,SAAA3B,KAAA2B,OAAA3B,KAAA2B,OAoBEE,MAAM,KApBRC,IAAA,SAAAC,GAAA,OAAAC,OAAAD,MAsBH/B,KAAKiC,sBAtBFjC,KAAAkC,uBAwBHlC,KAAKmC,qBAxBFnC,KAAAoC,gBA0BHpC,KAAKqC,qB,4DAfAf,KAAOgB,gBACPf,KAAOgB,QAAKlB,SAAc5D,KAAKmD,cAApCZ,KAAAuB,KAAAvB,KAAAsB,MACKV,KAAAA,QAAgBZ,KAAKqB,KACrBX,KAAQ8B,QAAKhB,KAAStB,Q,6CAIVI,IAAAA,EAAAA,KACd,IAAAN,KAAOyC,OAEA,MAAIT,IAAJU,MAAA1C,KAAAc,UAAAC,iBAyDV,IAAIf,KAAKyC,kBAAkBE,iBAxDtBV,MAAAA,IAAAA,MAALjC,KAAAc,UAAAL,mBACA,GAAA,UAAKyB,KAAAA,OAAAA,KA2DD,MAAM,IAAIQ,MAAM1C,KAAKc,UAAUG,gBAEnCjB,KAAKyC,OAAOG,UAAUC,IAAI,gBA3D1B7C,KAAKoC,OAAAA,IAALpC,KAAAsC,cAAA,EAAAtC,KAAAsB,KA6DAtB,KAAKyC,OAAOhF,IAAMuC,KAAKsC,cAAgB,IAAOtC,KAAKuB,KA5DnDvB,KAAKqC,OAAL/C,KAAAU,KAAAnB,MACHmB,KAAAyC,OAAAjF,MAAAwC,KAAAY,cA8DGZ,KAAKyC,OAAOK,iBAAiB,QAAS,WAAA,OAAMC,EAAKC,sBACjDhD,KAAKyC,OAAOK,iBAAiB,SAAU,WAAA,OAAMC,EAAKE,uBAClDC,OAAOJ,iBAAiB,SAAU,WAAA,OAAMC,EAAKI,yB,0CAtBzCnD,KAAKoD,gBACLpD,KAAKwC,UAAUxC,KAAKsB,QAApBtB,KAAAxC,S,2CA8BJwC,KAAKoC,gBACLpC,KAAKqC,cA3BcrC,KAAA4B,UAAA5B,KAAAuC,QAAAvC,KAAAxC,S,oCAGlBwC,KAAA2B,SAAA3B,KAAAxC,MAAAwC,KAAAsC,cA8BKnE,gBA7BGsE,KAAAA,QACCzC,KAAI0C,QACb1C,KAAAwC,SACExC,KAAKyC,W,sCAGRzC,KAAKyC,QAAOG,KAAUC,cAiChBtF,SAASyC,KAAKxC,MAAOwC,KAAKoD,QAASpD,KAAKwC,SAhCzCC,OAALzC,KAAkBxC,OACbiF,KAAAA,SAAazC,KAAKsC,QAAAA,WAALtC,KAA4B2B,OAA9C3B,KAAAuC,UACKE,KAAAA,UAAczC,KAAKnB,e,mCAEcmB,KAAAqD,OAAMC,UAAKN,KAAAA,QAAXO,QAAAvD,KAAA0B,gBAAtC1B,KAAAqD,OAAAG,MAAAC,KAAAzD,KAAA0D,SAAA1D,KAAAxC,MAAA,K,+BACuCA,E,GAAWyF,IAALU,EAAKV,EAAAA,UAAAA,aAAAA,I,IAAAA,EAAlDxF,EAAAuE,OAAAhC,KAAAsC,cAAA,IAAAtC,KAAAuB,MACA2B,OAAOJ,EAuCKd,OAAOhC,KAAKsC,cAAgB,EAAItC,KAAKsB,OAvCzB7D,GAAUuC,KAAA4D,WAAAC,YAAAF,GAAAA,EAAA,EAAA,O,2CA4ClC3D,KAAK4D,WAAa5D,KAAK8D,eAAe,yBACtC9D,KAAKyC,OAAOsB,WAAWC,aAAahE,KAAK4D,WAAY5D,KAAKyC,QAC1DzC,KAAKiE,gBAAkBjE,KAAK8D,eA3CZ,+BAChB9D,KAAKoC,gBAAL8B,OAAAlE,KAAAyC,QA4CAzC,KAAK4D,WAAWM,OAAOlE,KAAKiE,iBA3CvBrC,KAAAA,WACR5B,KAAAqD,OAAArD,KAAAmE,aA6COnE,KAAK4D,WAAWM,OAAOlE,KAAKqD,SAE7BrD,KAAK2B,SA5CHS,KAAAA,uBAALpC,KAAAoE,qBA8CIpE,KAAK4D,WAAWM,OAAOlE,KAAKqE,2B,qCA3CnCC,GAgDG,IAAMC,EAAUpD,SAASqD,cAAc,OA7CvC,OA8CAD,EAAQ3B,UAAUC,IAAIyB,GACtBC,EAAQf,MAAMiB,SAAW,WA/CjB9C,I,mCAoDR,IAAM+C,EAAMvD,SAASqD,cA3CT,QAKZ,OAJAE,EAAKnC,UAAUM,IAAKP,qBAGpBtC,KAAG4D,WAAaJ,MAAKjB,cAAUoC,OACvBlD,I,2CA6CR,IAAMmD,EAAkBzD,SA1CfqD,cAAA,OACTI,EAAYtB,UAAaT,IAAKN,kCAwCb,IAAAsC,EAAAC,EAAA7F,2BAvCCwE,KAAO9B,QAuCR,IAvCjB,IAAAmD,EAAA3F,MAAA0F,EAAAC,EAAA1F,KAAAC,MAA8BqE,CAAAA,IAAlBF,EAAkBE,EAAAA,MACjCqB,EAAA5D,SAAAqD,cAAA,OA2COO,EAAOnC,UAAUC,IAAI,wBACrB,IAAMmC,EAAYhF,KAAKsC,cAAgBnE,gBAAgBmB,EACnDU,KAAKoD,QA3CR5F,KA2CsBgF,SA3CHlD,EAAZqE,EAAYH,MAAAC,KAAAzD,KAAA0D,SAAAsB,EAAA,GAClBvH,EAAkB6E,OAAAA,GAClB5E,KAAMsE,eAAYM,KAAAA,IAkCP,MAAA5C,GAAAoF,EAAAnF,EAAAD,GAAA,QAAAoF,EAAAlF,IAhCpB,OAAAgF,I,2CAGG,IAAKhB,IAAAA,EAAAA,EAALqB,EAAkBjF,KAAK8D,eAAelG,OAAAqH,IAAA,CA8ClC,IAAIF,EAAS/E,KAAKkF,eAAeD,GA7CzBlB,EAAWC,KAAAA,cAAkBJ,gBAAiBnB,KAA1Dd,OAAAsD,GA+CQjF,KAAKoD,QAASpD,KAAKwC,SAAWxC,KAAK2B,OAAOsD,GA9C7ChB,EAAAA,MAAAA,KAAkBjE,KAAK8D,SAAAA,EAAe,M,oCAEtCF,EAAWM,EAAYD,GAkD5B,YAAiBpG,IAAVsH,EAjDJA,EACM9B,KAALZ,OAAc2C,aAAdC,GAmDMrF,KAAKyC,OAAO6C,aAAaD,GAlD1BzB,I,+BAENuB,EAAKxD,EAAQ4D,GACZ,YAAKlB,IAAAA,EAqDHc,OApD0Bd,IAAvBT,KAAAA,OAAWM,QAAOsB,GAC1BxF,KAAAyC,OAAAgD,QAAAD,GACJD,I,0BAtHG,IAAIvF,KAAKsC,cA9BN,MAAA,IAAAI,MAAA1C,KAAAc,UAAAI,iBAkCH,OAAOlB,KAAKuC,S,aAlCT/E,GAsCH,IAAIwC,KAAKsC,cAtCN,MAAA,IAAAI,MAAA1C,KAAAc,UAAA4E,iBAAA1F,KAAAuC,QAAAxE,KAAAN,IAAAuC,KAAAwC,QAAAzE,KAAAL,IAAAF,EAAAwC,KAAAoD,UA0CHpD,KAAKyC,OAAOjF,MAAQW,gBAAgB6B,KAAKuC,QAASvC,KAAKoD,QA1CpDpD,KAAAwC,SA4CHxC,KAAKoC,kB,4BAIL,OAAOpC,KAAKyC,S,4BAIZ,OAAOzC,KAAKyC,OAAOjF,O,aApDhBA,GAwDHwC,KAAKyC,OAAOjF,MAAQA,EAvDpBwC,KAAAoC,sB","file":"log-slider.js","sourcesContent":["const logScale = (value, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return Math.exp(minV + scale * (value - minP));\n};\n\nconst inverseLogScale = (lg, max, min = 0) => {\n    const minP = 1;\n    const maxP = 1000;\n\n    const minV = Math.log(min);\n    const maxV = Math.log(max);\n\n    const scale = (maxV - minV) / (maxP - minP);\n\n    return (Math.log(lg) - minV) / scale + minP;\n};\n\nconst sliderTypes = Object.freeze({\n    LOG: 'log',\n    LINEAR: 'linear',\n});\n\nconst difference = (a, b) => a > b ? a - b : b - a;\n\nconst getClosest = (steps, value) => {\n    let diffLast = Infinity;\n    let closest = Infinity;\n    for(const step of steps) {\n        const diff = difference(step, value);\n        if(diff > diffLast) break;\n        diffLast = diff;\n        closest = step;\n    }\n    return closest;\n};\n\n/**\n * Handles configuration of <input type=\"range\" /> sliders\n */\nclass LogSlider {\n    _result;\n    _id;\n    _logMax;\n    _logMin;\n    _input;\n    _type;\n    _tabEl;\n    _decimalPlaces;\n    _steps;\n    _callback;\n    _wrapperEl;\n    _messages;\n    _stepMarkerContainerEl;\n    _stepMarkerEls = [];\n\n    /**\n     * RangeSlider constructor\n     *\n     * @param {string} id The `id` attribute of the range slider.\n     * @param {number=1} step Step increment of the range slider.\n     * @param {number=1} min Minimum value of the range slider\n     * @param {number=1000} max Maximum value of the range slider.\n     * @param {number=500} value The initial value of the range slider.\n     * @param {'log'|'linear'} type Must be one of sliderTypes ie sliderTypes.LOG or sliderTypes.LINEAR.\n     * @param {boolean=false} showTab\n     * @param {number=0} decimalPlaces\n     * @param {number[]|null} steps\n     * @param {callback=} callback An onChange callback matching (value, log) => {}\n     *                                  log parameter only available if the type is sliderType.LOG.\n     */\n    constructor(\n        {\n            id,\n            step,\n            min,\n            max,\n            value,\n            type,\n            showTab,\n            decimalPlaces,\n            steps,\n            callback = () => {},\n        }) {\n        this._id = id;\n        this._messages = {\n            elementNotFound: `No element found with id of ${this._id}`,\n            isNotInputElement: `${this._id} is not an \\`<input />\\` tag`,\n            isNotTypeRange: `${this._id} does not have \\`type=\"range\"\\` set.`,\n            notLogSliderGet: `${this._id} is not a log slider, you can't 'get' a log value. Change the type to sliderTypes.LOG`,\n            notLogSliderSet: `${this._id} is not a log slider, you can't 'set' a log value. Change the type to sliderTypes.LOG`,\n        };\n        this._input = document.getElementById(id);\n        this._step = this._setAttribute(step, 'step', 1);\n        this._min = this._setAttribute(min, 'min', 1);\n        this._max = this._setAttribute(max, 'max', 1000);\n        this._initialValue = this._setAttribute(value, 'value', 500);\n        this._type = this._setData(type, 'type', sliderTypes.LINEAR);\n        this._showTab = this._setData(showTab, 'showTab', true);\n        this._decimalPlaces = this._setData(decimalPlaces, 'decimalPlaces', 0);\n        this._steps = this._setData(steps, 'steps', null);\n        this._callback = callback;\n        if(typeof this._steps === 'string') this._steps = this._steps\n            .split(',')\n            .map(x => Number(x));\n        this._initialiseLogValue();\n        this._configureRangeInput();\n        this._createDomElements();\n        this._updateResult();\n        this._snapToStep();\n    }\n\n    get log() {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderGet);\n        }\n\n        return this._result;\n    }\n\n    set log(value) {\n        if(!this.isLogSlider()) {\n            throw new Error(this._messages.notLogSliderSet);\n        }\n        this._result = Math.max(this._logMin, Math.min(value, this._logMax));\n        this._input.value = inverseLogScale(this._result, this._logMax,\n            this._logMin);\n        this._updateResult();\n    };\n\n    get input() {\n        return this._input;\n    }\n\n    get value() {\n        return this._input.value;\n    }\n\n    set value(value) {\n        this._input.value = value;\n        this._updateResult();\n    }\n\n    isLogSlider = () => this._type === sliderTypes.LOG;\n\n    isLinearSlider = () => this._type === sliderTypes.LINEAR;\n\n    reset = () => {this.value = this._initialValue;};\n\n    _initialiseLogValue() {\n        if(this.isLogSlider()) {\n            this._result = logScale(this._initialValue, this._max, this._min);\n            this._logMax = this._max;\n            this._logMin = this._min;\n        }\n    }\n\n    _configureRangeInput() {\n        if(!this._input) {\n            throw new Error(this._messages.elementNotFound);\n        }\n        if(!this._input instanceof HTMLInputElement) {\n            throw new Error(this._messages.isNotInputElement);\n        }\n        if(this._input.type !== 'range') {\n            throw new Error(this._messages.isNotTypeRange);\n        }\n        this._input.classList.add('range-slider');\n        this._input.min = this.isLogSlider() ? 1 : this._min;\n        this._input.max = this.isLogSlider() ? 1000 : this._max;\n        this._input.step = this._step;\n        this._input.value = this._initialValue;\n        this._input.addEventListener('input', () => this._handleInputEvent());\n        this._input.addEventListener('change', () => this._handleChangeEvent());\n        window.addEventListener('resize', () => this._updateStepMarkers());\n    }\n\n    _handleInputEvent() {\n        this._updateResult();\n        this._callback(this._result, this.value);\n    }\n\n    _handleChangeEvent() {\n        this._updateResult();\n        this._snapToStep();\n        this._callback(this._result, this.value);\n    }\n\n    _snapToStep() {\n        if(this._steps) this.value = this.isLogSlider()\n            ? inverseLogScale(\n                this._result,\n                this._logMax,\n                this._logMin,\n            )\n            : this._result;\n    }\n\n    _updateResult() {\n        this._result = this.isLogSlider()\n            ? logScale(this.value, this._logMax, this._logMin)\n            : Number(this.value);\n        if(this._steps) this._result = getClosest(this._steps, this._result);\n        if(this._showTab) this._updateTab();\n    }\n\n    _updateTab() {\n        this._tabEl.innerText = (this._result.toFixed(this._decimalPlaces));\n        this._tabEl.style.left = this._getLeft(this.value, 8);\n    }\n\n    _getLeft(value, offset = 0) {\n        const max = Number(this.isLogSlider() ? 1000 : this._max);\n        const min = Number(this.isLogSlider() ? 1 : this._min);\n        return (((value - min) / max) * (this._wrapperEl.clientWidth - offset)) + (offset / 2) + 'px';\n    }\n\n    _createDomElements() {\n        this._wrapperEl = this._createWrapper('range-slider--wrapper');\n        this._input.parentNode.insertBefore(this._wrapperEl, this._input);\n        this._inputWrapperEl = this._createWrapper('range-slider--input-wrapper');\n        this._inputWrapperEl.append(this._input);\n        this._wrapperEl.append(this._inputWrapperEl);\n        if(this._showTab) {\n            this._tabEl = this._createTab();\n            this._wrapperEl.append(this._tabEl);\n        }\n        if(this._steps) {\n            this._stepMarkerContainerEl = this._createStepMarkers();\n            this._wrapperEl.append(this._stepMarkerContainerEl);\n        }\n    }\n\n    _createWrapper(className) {\n        const wrapper = document.createElement('div');\n        wrapper.classList.add(className);\n        wrapper.style.position = 'relative';\n        return wrapper;\n    }\n\n    _createTab() {\n        const tab = document.createElement('span');\n        tab.classList.add('range-slider--tab');\n        this._wrapperEl.style.paddingBottom = '12px';\n        return tab;\n    }\n\n    _createStepMarkers() {\n        const markerContainer = document.createElement('div');\n        markerContainer.classList.add('range-slider--marker-container');\n        for(const step of this._steps) {\n            const marker = document.createElement('div');\n            marker.classList.add('range-slider--marker');\n            const leftValue = this.isLogSlider() ? inverseLogScale(step,\n                this._logMax, this._logMin) : step;\n            marker.style.left = this._getLeft(leftValue, 8);\n            markerContainer.append(marker);\n            this._stepMarkerEls.push(marker)\n        }\n        return markerContainer;\n    }\n\n    _updateStepMarkers() {\n        for(let i = 0; i < this._stepMarkerEls.length; i++){\n            let marker = this._stepMarkerEls[i];\n            const leftValue = this.isLogSlider() ? inverseLogScale(this._steps[i],\n                this._logMax, this._logMin) : this._steps[i];\n            marker.style.left = this._getLeft(leftValue, 8);\n        }\n    }\n\n    _setAttribute(param, attribute, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.hasAttribute(attribute)\n                ? this._input.getAttribute(attribute)\n                : defaultValue;\n    }\n\n    _setData(param, dataKey, defaultValue) {\n        return param !== undefined\n            ? param\n            : this._input.dataset[dataKey] !== undefined\n                ? this._input.dataset[dataKey]\n                : defaultValue;\n    }\n}\n"]}